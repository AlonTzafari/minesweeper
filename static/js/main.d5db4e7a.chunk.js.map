{"version":3,"sources":["contexts/gameContext.js","pages/Menu/index.js","pages/Menu/Menu.js","components/GameInfo/index.js","components/GameInfo/GameInfo.js","components/Tile/index.js","components/Tile/Tile.js","components/GameBoard/index.js","components/GameBoard/GameBoard.js","logic/Game.js","pages/Game/index.js","pages/Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["gameContext","createContext","Provider","Menu","useContext","setStart","gameConfig","setGameConfig","useState","width","setWidth","height","setHeight","maxMines","setMaxMines","widthRef","useRef","heightRef","minesRef","supermanRef","useEffect","current","value","mines","checked","superman","className","name","onSubmit","e","config","Number","preventDefault","htmlFor","ref","onChange","currentTarget","type","id","min","max","step","required","GameInfo","flags","endGame","onClick","Tile","tileValue","tile","reveal","flag","shortCB","longCB","duration","timer","isCancel","Date","elapsedTime","producer","startHandler","endHandler","moveHandler","shiftKey","onTouchStart","onTouchEnd","onTouchMove","state","GameBoard","game","update","cellSpacing","cellPadding","board","map","row","y","x","Game","Array","fill","minesToPlace","Math","floor","random","minesAround","tilePos","this","flagsLeft","minesLeft","onLose","stack","length","args","pop","floodReveal","push","onWin","noFlags","GameClass","setTimeout","alert","updateState","setUpdate","App","start","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5db4e7a.chunk.js","sourcesContent":["import {createContext} from 'react';\r\n\r\nconst gameContext = createContext();\r\nexport default gameContext;\r\nexport const gameProvider = gameContext.Provider;","import Menu from './Menu';\r\n\r\nexport default Menu;","import {useContext, useRef, useState, useEffect} from 'react';\r\nimport gameContext from '../../contexts/gameContext';\r\nimport './Menu.scss';\r\n\r\nexport default function Menu() {\r\n\r\n    const {setStart, gameConfig, setGameConfig} = useContext(gameContext);\r\n    const [width, setWidth] = useState(gameConfig.width);\r\n    const [height, setHeight] = useState(gameConfig.height);\r\n    const [maxMines, setMaxMines] = useState(16);\r\n    const widthRef = useRef();\r\n    const heightRef = useRef();\r\n    const minesRef = useRef();\r\n    const supermanRef = useRef();\r\n\r\n    const submitHandler = (e) => {\r\n        const config = {\r\n            width,\r\n            height,\r\n            mines: Number(minesRef.current.value),\r\n            superman: supermanRef.current.checked,\r\n        };\r\n        setGameConfig(config);\r\n        setStart(true);\r\n        e.preventDefault();\r\n    };\r\n\r\n    const onWidthChange = (e) => {\r\n        setWidth(Number(e.currentTarget.value))\r\n    }\r\n    const onHeightChange = (e) => {\r\n        setHeight(Number(e.currentTarget.value))\r\n    }\r\n\r\n    useEffect(() => {\r\n        setWidth(gameConfig.width);\r\n        setHeight(gameConfig.height);\r\n        widthRef.current.value = gameConfig.width;\r\n        heightRef.current.value = gameConfig.height;\r\n        minesRef.current.value = gameConfig.mines;\r\n        supermanRef.current.checked = gameConfig.superman;\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setMaxMines(width*height)\r\n    }, [width, height])\r\n\r\n    return (\r\n        <div data-testid=\"menu\" className=\"menu page\">\r\n            \r\n            <form name=\"menu-options\" onSubmit={submitHandler}>\r\n                <h2>Minesweeper</h2>\r\n                <label htmlFor=\"width\">Width</label>\r\n                <input ref={widthRef} onChange={onWidthChange} type=\"number\" id=\"width\" name=\"width\" min=\"4\" max=\"300\" step=\"1\" required/>\r\n                <label htmlFor=\"height\">Height</label>\r\n                <input ref={heightRef} onChange={onHeightChange} type=\"number\" id=\"height\" name=\"height\" min=\"4\" max=\"300\" step=\"1\" required/>\r\n                <label htmlFor=\"mines\">Mines</label>\r\n                <input ref={minesRef} type=\"number\" id=\"mines\" name=\"mines\" min=\"1\" max={`${maxMines}`} step=\"1\" required/>\r\n                <label htmlFor=\"superman\">Superman Mode</label>\r\n                <input ref={supermanRef} type=\"checkbox\" id=\"superman\" name=\"superman\"/>\r\n                <div className=\"btnContainer\">\r\n                    <button type=\"submit\">START</button>\r\n                </div>\r\n            </form>\r\n\r\n            <p>{'to place a flag'}</p>\r\n            <p>{'keyboard: shift+leftClick'}</p>\r\n            <p>{'mobile: long press'}</p>\r\n        </div>\r\n    )\r\n}\r\n","import GameInfo from './GameInfo';\r\n\r\nexport default GameInfo;","import './GameInfo.scss';\r\n\r\nexport default function GameInfo({flags, endGame}) {\r\n    \r\n\r\n    return (\r\n        <header className=\"gameInfo\">\r\n            <span>{`flags: ${flags}🚩`}</span>\r\n            <button onClick={endGame}>End Game</button>\r\n        </header>\r\n    );\r\n}\r\n","import Tile from './Tile';\r\n\r\nexport default Tile;","import './Tile.scss';\r\n\r\nexport default function Tile({tile, superman, reveal, flag}) {\r\n    \r\n    const onClick = (e) => {\r\n        if(e.shiftKey) flag();\r\n        else reveal();\r\n        e.preventDefault();\r\n    }\r\n    \r\n    const producer = (shortCB, longCB, duration) => {\r\n        let timer;\r\n        let isCancel;\r\n        const start = () => {\r\n            isCancel = false;\r\n            timer = new Date();\r\n        }\r\n        const end = () => {\r\n            const elapsedTime = new Date() - timer;\r\n            if (isCancel) {}\r\n            else if (elapsedTime >= duration) longCB();\r\n            else shortCB();\r\n        }\r\n        const cancel = () => {\r\n            isCancel = true;\r\n        }\r\n        return [start, end, cancel]\r\n    }\r\n\r\n    const [startHandler, endHandler, moveHandler] = producer(reveal, flag, 400);\r\n\r\n    const tileDisplay = (tileValue) => {\r\n        if (tileValue === 0) return ''; \r\n        if (tileValue === 'bomb') return '💣';\r\n        if (typeof tileValue === 'number' && tileValue > 0) return tileValue;\r\n    };\r\n\r\n    return (\r\n        <div className=\"tile\" onClick={onClick} onTouchStart={startHandler} onTouchEnd={endHandler} onTouchMove={moveHandler}>\r\n            <span className=\"content\">{tileDisplay(tile.value)}</span>\r\n            {\r\n                tile.state !== 'visible' ?\r\n                    <span className={`cover ${superman ? 'transparent' : null}`}>\r\n                        {tile.state === 'flag' ? '🚩' : null}\r\n                    </span> :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n}","import GameBoard from './GameBoard';\r\n\r\nexport default GameBoard;","import Tile from '../Tile';\r\nimport './GameBoard.scss';\r\n\r\nexport default function GameBoard({game, update}) {\r\n\r\n    return (\r\n        <div className=\"gameBoard\">\r\n            <table cellSpacing=\"0\" cellPadding=\"0\">\r\n                <tbody>\r\n                    {\r\n                        game.board.map( (row, y) => {\r\n                            return <tr key={y}>\r\n                                {\r\n                                    row.map( (tile, x) => {\r\n                                        const reveal = () => {\r\n                                            game.reveal(x,y);\r\n                                            update();\r\n                                        };\r\n                                        const flag = () => {\r\n                                            game.flag(x,y);\r\n                                            update();\r\n                                        };\r\n                                        return (\r\n                                            <td key={x}>\r\n                                                <Tile tile={tile} superman={game.superman} reveal={reveal} flag={flag}/>\r\n                                            </td>);\r\n                                    })\r\n                                }\r\n                            </tr>\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n","export default class Game {\r\n    board;\r\n    flagsLeft;\r\n    minesLeft;\r\n    superman;\r\n    onLose;\r\n    onWin;\r\n    noFlags;\r\n\r\n    constructor(config) {\r\n\r\n        const {width, height, mines, superman} = config;\r\n        \r\n        //create a matrix with all cells at state hidden & value 0\r\n        const board = new Array(height).fill(0).map( () => {\r\n            const widthArr = new Array(width).fill(0);\r\n            return widthArr.map(() => {\r\n                return {state:'hidden', value: 0}\r\n            });\r\n        });\r\n    \r\n        //place mines randomly\r\n        let minesToPlace = mines;\r\n        while (minesToPlace > 0) {\r\n            const x = Math.floor(Math.random() * width);\r\n            const y = Math.floor(Math.random() * height);\r\n            const tile = board[y][x]; \r\n            if(tile.value === 'bomb') continue;\r\n            board[y][x] = {state: 'hidden', value:'bomb'};\r\n            minesToPlace--;\r\n        }\r\n\r\n        //calculate values of empty tiles\r\n        for(let y = 0; y < height; y++) {\r\n            for(let x = 0; x < width; x++) {\r\n                const tile = board[y][x];\r\n                if(tile.value === 'bomb') continue;\r\n                let minesAround = 0;\r\n                const tilesAround = [\r\n                    {x: x - 1, y: y - 1},\r\n                    {x: x, y: y - 1},\r\n                    {x: x + 1, y: y - 1},\r\n                    {x: x - 1, y: y},\r\n                    {x: x + 1, y: y},\r\n                    {x: x - 1, y: y + 1},\r\n                    {x: x, y: y + 1},\r\n                    {x: x + 1, y: y + 1},\r\n                ];\r\n                for (const tilePos of tilesAround) {\r\n                    if (tilePos.x < 0 || tilePos.x >= width) continue;\r\n                    if (tilePos.y < 0 || tilePos.y >= height) continue;\r\n                    minesAround += board[tilePos.y][tilePos.x].value === 'bomb' ? 1 : 0;\r\n                }\r\n                board[y][x].value = minesAround;\r\n            }  \r\n        }\r\n        this.board = board;\r\n        this.flagsLeft = mines;\r\n        this.superman = superman;\r\n        this.minesLeft = mines;\r\n    }\r\n\r\n    reveal(x, y) {\r\n\r\n        const tile = this.board[y][x];\r\n        if (tile.state === 'visible' || tile.state === 'flag') return;\r\n\r\n        if (tile.value === 'bomb') {\r\n            tile.state = 'visible';\r\n            this.onLose();  \r\n        } else if (typeof tile.value ===  'number' && tile.value > 0) {\r\n            tile.state = 'visible';\r\n        } else {\r\n            const stack = [[x,y]];\r\n            while (stack.length > 0) {\r\n                const args = stack.pop();\r\n                floodReveal(this.board, ...args, stack);\r\n            }\r\n        }\r\n\r\n        function floodReveal(board, x, y, stack) {\r\n            if (x < 0 || x >= board[0].length) return;\r\n            if (y < 0 || y >= board.length) return;\r\n            const tile = board[y][x]; \r\n            if (tile.value === 'bomb') return;\r\n            if (typeof tile.value ===  'number' && tile.value > 0) {\r\n                tile.state = 'visible';\r\n                return;\r\n            }\r\n            if(tile.state === 'visible') return;\r\n            tile.state = 'visible';\r\n            stack.push([x - 1, y]);\r\n            stack.push([x + 1, y]);\r\n            stack.push([x, y - 1]);\r\n            stack.push([x, y + 1]);\r\n        }\r\n        \r\n    }\r\n\r\n    flag(x, y) {\r\n\r\n        const tile = this.board[y][x];\r\n        if (tile.state === 'visible') return;\r\n        if (tile.state === 'flag') {\r\n            tile.state = 'hidden';\r\n            this.flagsLeft++;\r\n            return;\r\n        }\r\n        if (this.flagsLeft === 0) {\r\n            this.noFlags();\r\n            return;\r\n        }\r\n        tile.state = 'flag';\r\n        this.flagsLeft--;\r\n        if (tile.value === 'bomb') {\r\n            this.minesLeft--;\r\n            if(this.minesLeft === 0) this.onWin();\r\n        }\r\n\r\n        \r\n    }\r\n    \r\n}","import Game from './Game';\r\n\r\nexport default Game;","import {useState, useContext} from 'react';\r\nimport gameContext from '../../contexts/gameContext';\r\nimport GameInfo from '../../components/GameInfo';\r\nimport GameBoard from '../../components/GameBoard';\r\nimport GameClass from '../../logic/Game'; \r\n\r\nexport default function Game() {\r\n\r\n    const {setStart, gameConfig} = useContext(gameContext);\r\n    const [game] = useState(new GameClass(gameConfig));\r\n    game.onLose = () => setTimeout( () => {\r\n        alert(\"You Lost!\");\r\n        setStart(false);\r\n    }, 200);\r\n    game.onWin = () => setTimeout( () => {\r\n        alert(\"You Win!\");\r\n        setStart(false);\r\n    }, 200);\r\n    game.noFlags = () => alert(\"No Flags Left!\");\r\n    \r\n    const [updateState, setUpdate] = useState(0);\r\n    const update = () => {\r\n        setUpdate(1 - updateState);\r\n    }\r\n\r\n    const endGame = () => {\r\n        setStart(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"page\" data-testid=\"game\">\r\n            <GameInfo flags={game.flagsLeft} endGame={endGame} />\r\n            <GameBoard game={game} update={update}/>\r\n            {updateState ? null : null}\r\n        </div>\r\n    )\r\n}\r\n","import './App.scss';\nimport Menu from './pages/Menu';\nimport Game from './pages/Game';\nimport gameContext from './contexts/gameContext';\nimport {useState} from 'react';\n\nfunction App() {\n    const [start, setStart] = useState(false);\n    const [gameConfig, setGameConfig] = useState({\n        width: 8,\n        height: 8,\n        mines: 8,\n        superman: false\n    });\n\n    return (\n        <gameContext.Provider value={{start, setStart, gameConfig, setGameConfig}}>\n        <div className=\"App\">\n            {\n                start ? <Game /> :\n                <Menu />\n            }\n            \n\n        </div>\n        </gameContext.Provider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}