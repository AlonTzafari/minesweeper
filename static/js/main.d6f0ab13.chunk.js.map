{"version":3,"sources":["components/Loader/index.js","components/Loader/Loader.js","contexts/gameContext.js","pages/Menu/index.js","pages/Menu/Menu.js","components/GameInfo/index.js","components/GameInfo/GameInfo.js","components/Tile/index.js","components/Tile/Tile.js","components/GameBoard/index.js","components/GameBoard/GameBoard.js","logic/Game.js","logic/createMatrix.js","pages/Game/index.js","pages/Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Loader","className","gameContext","createContext","Provider","Menu","useContext","setStart","gameConfig","setGameConfig","useState","width","setWidth","height","setHeight","maxMines","setMaxMines","loading","setLoading","widthRef","useRef","heightRef","minesRef","supermanRef","useEffect","current","value","mines","checked","superman","name","onSubmit","e","config","Number","preventDefault","htmlFor","ref","onChange","currentTarget","type","id","min","max","step","required","GameInfo","flags","endGame","onClick","Tile","tileValue","tile","reveal","flag","shortCB","longCB","duration","timer","isCancel","Date","elapsedTime","producer","startHandler","endHandler","moveHandler","shiftKey","onTouchStart","onTouchEnd","onTouchMove","state","GameBoard","game","update","cellSpacing","cellPadding","board","map","row","y","x","Game","this","flagsLeft","minesLeft","fillValue","Array","fill","createMatrix","mineLocations","placeMinesRandomly","calculateTileValues","onLose","stack","length","args","pop","floodReveal","push","onWin","noFlags","numMines","minesToPlace","Math","floor","random","tilesAround","minePos","tilePos","tileAtPos","GameClass","setTimeout","alert","updateState","setUpdate","App","start","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6f0ab13.chunk.js","sourcesContent":["import Loader from './Loader';\r\n\r\nexport default Loader;","import './Loader.scss';\r\n\r\nexport default function Loader() {\r\n    return (\r\n        <div className=\"loader\">\r\n            Loading...\r\n        </div>\r\n    )\r\n}\r\n","import {createContext} from 'react';\r\n\r\nconst gameContext = createContext();\r\nexport default gameContext;\r\nexport const gameProvider = gameContext.Provider;","import Menu from './Menu';\r\n\r\nexport default Menu;","import \"./Menu.scss\";\r\nimport { useContext, useRef, useState, useEffect } from \"react\";\r\nimport Loader from '../../components/Loader';\r\nimport gameContext from \"../../contexts/gameContext\";\r\n\r\nexport default function Menu() {\r\n    const { setStart, gameConfig, setGameConfig } = useContext(gameContext);\r\n    const [width, setWidth] = useState(gameConfig.width);\r\n    const [height, setHeight] = useState(gameConfig.height);\r\n    const [maxMines, setMaxMines] = useState(16);\r\n    const [loading, setLoading] = useState(false);\r\n    const widthRef = useRef();\r\n    const heightRef = useRef();\r\n    const minesRef = useRef();\r\n    const supermanRef = useRef();\r\n\r\n    const submitHandler = (e) => {\r\n        const config = {\r\n            width,\r\n            height,\r\n            mines: Number(minesRef.current.value),\r\n            superman: supermanRef.current.checked,\r\n        };\r\n        setGameConfig(config);\r\n        setLoading(true);\r\n        e.preventDefault();\r\n    };\r\n\r\n    const onWidthChange = (e) => {\r\n        setWidth(Number(e.currentTarget.value));\r\n    };\r\n    const onHeightChange = (e) => {\r\n        setHeight(Number(e.currentTarget.value));\r\n    };\r\n\r\n    useEffect(() => {\r\n        setWidth(gameConfig.width);\r\n        setHeight(gameConfig.height);\r\n        widthRef.current.value = gameConfig.width;\r\n        heightRef.current.value = gameConfig.height;\r\n        minesRef.current.value = gameConfig.mines;\r\n        supermanRef.current.checked = gameConfig.superman;\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setMaxMines(width * height);\r\n    }, [width, height]);\r\n\r\n    useEffect(() => {\r\n        if(loading) setStart(true);\r\n    }, [loading, setStart])\r\n\r\n    return (\r\n        <div data-testid=\"menu\" className=\"menu page\">\r\n            <form name=\"menu-options\" onSubmit={submitHandler}>\r\n                <h2>Minesweeper</h2>\r\n                <label htmlFor=\"width\">Width</label>\r\n                <input\r\n                    ref={widthRef}\r\n                    onChange={onWidthChange}\r\n                    type=\"number\"\r\n                    id=\"width\"\r\n                    name=\"width\"\r\n                    min=\"4\"\r\n                    max=\"300\"\r\n                    step=\"1\"\r\n                    required\r\n                />\r\n                <label htmlFor=\"height\">Height</label>\r\n                <input\r\n                    ref={heightRef}\r\n                    onChange={onHeightChange}\r\n                    type=\"number\"\r\n                    id=\"height\"\r\n                    name=\"height\"\r\n                    min=\"4\"\r\n                    max=\"300\"\r\n                    step=\"1\"\r\n                    required\r\n                />\r\n                <label htmlFor=\"mines\">Mines</label>\r\n                <input\r\n                    ref={minesRef}\r\n                    type=\"number\"\r\n                    id=\"mines\"\r\n                    name=\"mines\"\r\n                    min=\"1\"\r\n                    max={`${maxMines}`}\r\n                    step=\"1\"\r\n                    required\r\n                />\r\n                <label htmlFor=\"superman\">Superman Mode</label>\r\n                <input\r\n                    ref={supermanRef}\r\n                    type=\"checkbox\"\r\n                    id=\"superman\"\r\n                    name=\"superman\"\r\n                />\r\n                <div className=\"btnContainer\">\r\n                    {\r\n                        loading ? <Loader/> :\r\n                        <button type=\"submit\">START</button>\r\n                    }\r\n                </div>\r\n            </form>\r\n            <div className=\"tutorial\">\r\n                <p>to place a flag</p>\r\n                <p>keyboard: shift+leftClick</p>\r\n                <p>mobile: long press</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import GameInfo from './GameInfo';\r\n\r\nexport default GameInfo;","import \"./GameInfo.scss\";\r\n\r\nexport default function GameInfo({ flags, endGame }) {\r\n    return (\r\n        <header className=\"gameInfo\">\r\n            <span>{`flags: ${flags}🚩`}</span>\r\n            <button onClick={endGame}>End Game</button>\r\n        </header>\r\n    );\r\n}\r\n","import Tile from './Tile';\r\n\r\nexport default Tile;","import \"./Tile.scss\";\r\n\r\nexport default function Tile({ tile, superman, reveal, flag }) {\r\n    const onClick = (e) => {\r\n        if (e.shiftKey) flag();\r\n        else reveal();\r\n        e.preventDefault();\r\n    };\r\n\r\n    const producer = (shortCB, longCB, duration) => {\r\n        let timer;\r\n        let isCancel;\r\n        const start = () => {\r\n            isCancel = false;\r\n            timer = new Date();\r\n        };\r\n        const end = () => {\r\n            const elapsedTime = new Date() - timer;\r\n            if (isCancel) {\r\n            } else if (elapsedTime >= duration) longCB();\r\n            else shortCB();\r\n        };\r\n        const cancel = () => {\r\n            isCancel = true;\r\n        };\r\n        return [start, end, cancel];\r\n    };\r\n\r\n    const [startHandler, endHandler, moveHandler] = producer(reveal, flag, 400);\r\n\r\n    const tileDisplay = (tileValue) => {\r\n        if (tileValue === 0) return \"\";\r\n        if (tileValue === \"bomb\") return \"💣\";\r\n        if (typeof tileValue === \"number\" && tileValue > 0) return tileValue;\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"tile\"\r\n            onClick={onClick}\r\n            onTouchStart={startHandler}\r\n            onTouchEnd={endHandler}\r\n            onTouchMove={moveHandler}\r\n        >\r\n            <span className=\"content\">{tileDisplay(tile.value)}</span>\r\n            {tile.state !== \"visible\" ? (\r\n                <span className={`cover ${superman ? \"transparent\" : null}`}>\r\n                    {tile.state === \"flag\" ? \"🚩\" : null}\r\n                </span>\r\n            ) : null}\r\n        </div>\r\n    );\r\n}\r\n","import GameBoard from './GameBoard';\r\n\r\nexport default GameBoard;","import \"./GameBoard.scss\";\r\nimport Tile from \"../Tile\";\r\n\r\nexport default function GameBoard({ game, update }) {\r\n    return (\r\n        <div className=\"gameBoard\">\r\n            <table cellSpacing=\"0\" cellPadding=\"0\">\r\n                <tbody>\r\n                    {game.board.map((row, y) => {\r\n                        return (\r\n                            <tr key={y}>\r\n                                {row.map((tile, x) => {\r\n                                    const reveal = () => {\r\n                                        game.reveal(x, y);\r\n                                        update();\r\n                                    };\r\n                                    const flag = () => {\r\n                                        game.flag(x, y);\r\n                                        update();\r\n                                    };\r\n                                    return (\r\n                                        <td key={x}>\r\n                                            <Tile\r\n                                                tile={tile}\r\n                                                superman={game.superman}\r\n                                                reveal={reveal}\r\n                                                flag={flag}\r\n                                            />\r\n                                        </td>\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n","import createMatrix from \"./createMatrix\";\r\n\r\nexport default class Game {\r\n    board;\r\n    flagsLeft;\r\n    minesLeft;\r\n    superman;\r\n    onLose;\r\n    onWin;\r\n    noFlags;\r\n\r\n    constructor(config) {\r\n        const { width, height, mines, superman } = config;\r\n\r\n        this.flagsLeft = mines;\r\n        this.superman = superman;\r\n        this.minesLeft = mines;\r\n\r\n        this.board = createMatrix(width, height, () => {\r\n            return { state: \"hidden\", value: 0 };\r\n        });\r\n        const mineLocations = this.placeMinesRandomly(mines);\r\n        this.calculateTileValues(mineLocations);\r\n    }\r\n\r\n    reveal(x, y) {\r\n        const tile = this.board[y][x];\r\n        if (tile.state === \"visible\" || tile.state === \"flag\") return;\r\n\r\n        if (tile.value === \"bomb\") {\r\n            tile.state = \"visible\";\r\n            this.onLose();\r\n        } else if (typeof tile.value === \"number\" && tile.value > 0) {\r\n            tile.state = \"visible\";\r\n        } else {\r\n            const stack = [[x, y]];\r\n            while (stack.length > 0) {\r\n                const args = stack.pop();\r\n                floodReveal(this, ...args, stack);\r\n            }\r\n        }\r\n\r\n        function floodReveal(game, x, y, stack) {\r\n            const {board} = game;\r\n            if (x < 0 || x >= board[0].length) return;\r\n            if (y < 0 || y >= board.length) return;\r\n\r\n            const tile = board[y][x];\r\n\r\n            if (tile.value === \"bomb\") return;\r\n            if (tile.state === \"visible\") return;\r\n            \r\n            if(tile.state === 'flag') game.flagsLeft++;\r\n            tile.state = \"visible\";\r\n            \r\n            if (tile.value === 0) {\r\n                stack.push([x - 1, y - 1]);\r\n                stack.push([x, y - 1]);\r\n                stack.push([x + 1, y - 1]);\r\n                stack.push([x - 1, y ]);\r\n                stack.push([x + 1, y]);\r\n                stack.push([x - 1, y + 1]);\r\n                stack.push([x, y + 1]);\r\n                stack.push([x + 1, y + 1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    flag(x, y) {\r\n        const tile = this.board[y][x];\r\n        if (tile.state === \"visible\") return;\r\n\r\n        if (tile.state === \"flag\") {\r\n            if (tile.value === 'bomb') this.minesLeft++;\r\n            tile.state = \"hidden\";\r\n            this.flagsLeft++;\r\n            return;\r\n        }\r\n\r\n        if (this.flagsLeft === 0) {\r\n            this.noFlags();\r\n            return;\r\n        }\r\n\r\n        tile.state = \"flag\";\r\n        this.flagsLeft--;\r\n\r\n        if (tile.value === \"bomb\") {\r\n            this.minesLeft--;\r\n            if (this.minesLeft === 0) this.onWin();\r\n        }\r\n    }\r\n\r\n    placeMinesRandomly(numMines) {\r\n        const mineLocations = [];\r\n        let minesToPlace = numMines;\r\n        while (minesToPlace > 0) {\r\n            const x = Math.floor(Math.random() * this.board[0].length);\r\n            const y = Math.floor(Math.random() * this.board.length);\r\n            const tile = this.board[y][x];\r\n            if (tile.value === \"bomb\") continue;\r\n            this.board[y][x].value = \"bomb\";\r\n            minesToPlace--;\r\n            mineLocations.push({ x, y });\r\n        }\r\n        return mineLocations;\r\n    }\r\n\r\n    calculateTileValues(mineLocations) {\r\n        const height = this.board.length;\r\n        const width = this.board[0].length;\r\n\r\n        const tilesAround = [\r\n            { x: -1, y: -1 },\r\n            { x: 0, y: -1 },\r\n            { x: 1, y: -1 },\r\n            { x: -1, y: 0 },\r\n            { x: 1, y: 0 },\r\n            { x: -1, y: 1 },\r\n            { x: 0, y: 1 },\r\n            { x: 1, y: 1 },\r\n        ];\r\n\r\n        for (const minePos of mineLocations) {\r\n            for (const tilePos of tilesAround) {\r\n                const x = tilePos.x + minePos.x;\r\n                const y = tilePos.y + minePos.y;\r\n                if (x < 0 || x >= width) continue;\r\n                if (y < 0 || y >= height) continue;\r\n                const tileAtPos = this.board[y][x];\r\n                if (tileAtPos.value === \"bomb\") continue;\r\n                tileAtPos.value++;\r\n            }\r\n        }\r\n    }\r\n}\r\n","export default function createMatrix(width, height, fillValue) {\r\n    return new Array(height).fill(0).map(() => {\r\n        const widthArr = new Array(width).fill(0);\r\n        return widthArr.map(() => {\r\n            return fillValue();\r\n        });\r\n    });\r\n}\r\n","import Game from './Game';\r\n\r\nexport default Game;","import './Game.scss';\r\nimport { useState, useContext } from \"react\";\r\nimport GameInfo from \"../../components/GameInfo\";\r\nimport GameBoard from \"../../components/GameBoard\";\r\nimport GameClass from \"../../logic/Game\";\r\nimport gameContext from \"../../contexts/gameContext\";\r\n\r\nexport default function Game() {\r\n    const { setStart, gameConfig } = useContext(gameContext);\r\n\r\n    const [game] = useState(() => new GameClass(gameConfig));\r\n\r\n    game.onLose = () =>\r\n        setTimeout(() => {\r\n            alert(\"You Lost!\");\r\n            setStart(false);\r\n        }, 200);\r\n\r\n    game.onWin = () =>\r\n        setTimeout(() => {\r\n            alert(\"You Win!\");\r\n            setStart(false);\r\n        }, 200);\r\n\r\n    game.noFlags = () => alert(\"No Flags Left!\");\r\n\r\n    const [updateState, setUpdate] = useState(0);\r\n    const update = () => {\r\n        setUpdate(1 - updateState);\r\n    };\r\n\r\n    const endGame = () => {\r\n        setStart(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"game page\" data-testid=\"game\">\r\n            <GameInfo flags={game.flagsLeft} endGame={endGame} />\r\n            <GameBoard game={game} update={update} />\r\n        </div>\r\n    );\r\n}\r\n","import \"./App.scss\";\nimport { useState } from \"react\";\nimport Menu from \"./pages/Menu\";\nimport Game from \"./pages/Game\";\nimport gameContext from \"./contexts/gameContext\";\n\nfunction App() {\n    const [start, setStart] = useState(false);\n    const [gameConfig, setGameConfig] = useState({\n        width: 30,\n        height: 16,\n        mines: 99,\n        superman: false,\n    });\n\n    return (\n        <gameContext.Provider\n            value={{ start, setStart, gameConfig, setGameConfig }}\n        >\n            <div className=\"App\">{start ? <Game /> : <Menu />}</div>\n        </gameContext.Provider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}